{"version":3,"sources":["Joke.js","JokeList.js","App.js","serviceWorker.js","index.js"],"names":["Joke","state","someKey","className","icon","faArrowUp","onClick","this","props","upvote","votes","faArrowDown","downvote","text","class","aria-role","aria-label","setState","React","Component","JokeList","jokes","url","headers","Accept","length","numJokesToGet","axios","get","res","push","id","uuid","data","joke","delta","st","map","src","alt","key","handleVote","defaultProps","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uXAgDeA,G,wDA1Cb,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACXC,QAAS,aAHC,E,qDAQZ,OACE,yBAAKC,UAAU,QACb,yBAAKA,UAAU,gBACb,kBAAC,IAAD,CACEA,UAAU,WACVC,KAAMC,IACNC,QAASC,KAAKC,MAAMC,SAEtB,0BAAMN,UAAU,cAAcI,KAAKC,MAAME,OACzC,kBAAC,IAAD,CACEP,UAAU,WACVC,KAAMO,IACNL,QAASC,KAAKC,MAAMI,YAGxB,yBAAKT,UAAU,aAAaI,KAAKC,MAAMK,MACvC,yBAAKV,UAAU,eACb,uBACEW,MAAM,sCACNC,YAAU,eACVC,aAAW,sC,0CAQnBT,KAAKU,SAAS,CACZf,QAAS,mB,GAtCIgB,IAAMC,Y,iBCCnBC,E,kDACJ,aAAe,IAAD,8BACZ,gBACKnB,MAAQ,CACXoB,MAAO,IAHG,E,sLAWNC,EAAM,8BACNC,EAAU,CACdC,OAAQ,oBAENH,EAAQ,G,YACLA,EAAMI,OAASlB,KAAKC,MAAMkB,e,iCACfC,IAAMC,IAAIN,EAAK,CAAEC,QAASA,I,OAAtCM,E,OACJR,EAAMS,KAAK,CAAEC,GAAIC,MAAQnB,KAAMgB,EAAII,KAAKC,KAAMxB,MAAO,I,uBAEvDH,KAAKU,SAAS,CAAEI,MAAOA,I,wIAGdU,EAAII,GACb5B,KAAKU,UAAS,SAAAmB,GAAE,MAAK,CACnBf,MAAOe,EAAGf,MAAMgB,KAAI,SAAAH,GAAI,OACtBA,EAAKH,KAAOA,EAAZ,eAAsBG,EAAtB,CAA4BxB,MAAOwB,EAAKxB,MAAQyB,IAAUD,W,+BAKtD,IAAD,OACP,OACE,yBAAK/B,UAAU,YACb,yBAAKA,UAAU,oBACb,wBAAIA,UAAU,kBACZ,qCADF,UAGA,yBACEmC,IAAI,6FACJC,IAAI,gBAEN,4BAAQpC,UAAU,qBAAlB,cAEF,yBAAKA,UAAU,kBACZI,KAAKN,MAAMoB,MAAMgB,KAAI,SAAAH,GAAI,OACxB,kBAAC,EAAD,CACExB,MAAOwB,EAAKxB,MACZG,KAAMqB,EAAKrB,KACX2B,IAAKN,EAAKH,GACVtB,OAAQ,kBAAM,EAAKgC,WAAWP,EAAKH,GAAI,IACvCnB,SAAU,kBAAM,EAAK6B,WAAWP,EAAKH,IAAK,e,GApDjCb,IAAMC,WAAvBC,EAOGsB,aAAe,CACpBhB,cAAe,IAqDJN,Q,MCvDAuB,MARf,WACE,OACE,yBAAKxC,UAAU,OACb,kBAAC,EAAD,QCKcyC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f2bf61a4.chunk.js","sourcesContent":["import React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faArrowUp, faArrowDown } from \"@fortawesome/free-solid-svg-icons\";\nimport \"./Joke.css\";\n\nclass Joke extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      someKey: \"someValue\"\n    };\n  }\n\n  render() {\n    return (\n      <div className=\"Joke\">\n        <div className=\"Joke-buttons\">\n          <FontAwesomeIcon\n            className=\"fa-arrow\"\n            icon={faArrowUp}\n            onClick={this.props.upvote}\n          />\n          <span className=\"Joke-votes\">{this.props.votes}</span>\n          <FontAwesomeIcon\n            className=\"fa-arrow\"\n            icon={faArrowDown}\n            onClick={this.props.downvote}\n          />\n        </div>\n        <div className=\"Joke-text\">{this.props.text}</div>\n        <div className=\"Joke-smiley\">\n          <i\n            class=\"em em-rolling_on_the_floor_laughing\"\n            aria-role=\"presentation\"\n            aria-label=\"ROLLING ON THE FLOOR LAUGHING\"\n          ></i>\n        </div>\n      </div>\n    );\n  }\n\n  componentDidMount() {\n    this.setState({\n      someKey: \"otherValue\"\n    });\n  }\n}\n\nexport default Joke;\n","import React from \"react\";\nimport axios from \"axios\";\nimport \"./JokeList.css\";\nimport Joke from \"./Joke\";\nimport uuid from \"uuid/v4\";\n\nclass JokeList extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      jokes: []\n    };\n  }\n  static defaultProps = {\n    numJokesToGet: 10\n  };\n\n  async componentDidMount() {\n    const url = \"https://icanhazdadjoke.com/\";\n    const headers = {\n      Accept: \"application/json\"\n    };\n    let jokes = [];\n    while (jokes.length < this.props.numJokesToGet) {\n      let res = await axios.get(url, { headers: headers });\n      jokes.push({ id: uuid(), text: res.data.joke, votes: 0 });\n    }\n    this.setState({ jokes: jokes });\n  }\n\n  handleVote(id, delta) {\n    this.setState(st => ({\n      jokes: st.jokes.map(joke =>\n        joke.id === id ? { ...joke, votes: joke.votes + delta } : joke\n      )\n    }));\n  }\n\n  render() {\n    return (\n      <div className=\"JokeList\">\n        <div className=\"JokeList-sidebar\">\n          <h1 className=\"JokeList-title\">\n            <span>Dad</span> Jokes\n          </h1>\n          <img\n            src=\"https://assets.dryicons.com/uploads/icon/svg/8927/0eb14c71-38f2-433a-bfc8-23d9c99b3647.svg\"\n            alt=\"emoji-laugh\"\n          />\n          <button className=\"JokeList-get-more\">New Jokes</button>\n        </div>\n        <div className=\"JokeList-jokes\">\n          {this.state.jokes.map(joke => (\n            <Joke\n              votes={joke.votes}\n              text={joke.text}\n              key={joke.id}\n              upvote={() => this.handleVote(joke.id, 1)}\n              downvote={() => this.handleVote(joke.id, -1)}\n            />\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default JokeList;\n","import React from \"react\";\nimport JokeList from \"./JokeList\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <JokeList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}