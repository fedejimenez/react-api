{"version":3,"sources":["Joke.js","JokeList.js","App.js","serviceWorker.js","index.js"],"names":["Joke","props","copyTextToClipboard","el","textDiv","range","document","createRange","selectNode","window","getSelection","removeAllRanges","addRange","execCommand","setState","copySuccess","message","copyMessage","innerHTML","setInterval","state","votes","this","className","icon","faArrowUp","onClick","upvote","style","borderColor","getColor","faArrowDown","downvote","ref","textdiv","text","getEmoji","aria-label","someKey","React","Component","JokeList","jokes","JSON","parse","localStorage","getItem","loading","seenJokes","Set","map","joke","handleClick","bind","length","getJokes","sortJokes","url","headers","Accept","numJokesToGet","axios","get","res","newJoke","data","has","push","id","uuid","st","setItem","stringify","console","log","alert","delta","sort","a","b","faLaugh","size","spin","src","alt","key","handleVote","defaultProps","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.e1923868.chunk.js","sourcesContent":["import React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faArrowUp, faArrowDown } from \"@fortawesome/free-solid-svg-icons\";\nimport \"./Joke.css\";\n\nclass Joke extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      copySuccess: false\n    };\n  }\n  getColor() {\n    let votes = this.props.votes;\n    if (votes >= 15) {\n      return \"#4CAF50\";\n    } else if (votes >= 12) {\n      return \"#8BC34A\";\n    } else if (votes >= 9) {\n      return \"#CDDC39\";\n    } else if (votes >= 6) {\n      return \"#FFEB3B\";\n    } else if (votes >= 3) {\n      return \"#FFC107\";\n    } else if (votes >= 0) {\n      return \"#FF9800\";\n    } else {\n      return \"#F44336\";\n    }\n  }\n\n  getEmoji() {\n    let votes = this.props.votes;\n    if (votes >= 15) {\n      return \"em em-rolling_on_the_floor_laughing\";\n    } else if (votes >= 12) {\n      return \"em em-laughing\";\n    } else if (votes >= 9) {\n      return \"em em-smiley\";\n    } else if (votes >= 6) {\n      return \"em em-slightly_smiling_face\";\n    } else if (votes >= 3) {\n      return \"em em-neutral_face\";\n    } else if (votes >= 0) {\n      return \"em em-confused\";\n    } else {\n      return \"em em-angry\";\n    }\n  }\n\n  copyTextToClipboard = () => {\n    const el = this.textDiv;\n    var range = document.createRange();\n    range.selectNode(el);\n    window.getSelection().removeAllRanges(); // clear current selection\n    window.getSelection().addRange(range); // to select text\n    document.execCommand(\"copy\");\n    window.getSelection().removeAllRanges(); // to deselect\n    this.setState({ copySuccess: true });\n\n    let message = this.copyMessage;\n    message.innerHTML = \"Copied!\";\n    setInterval(function() {\n      message.innerHTML = \"Click to Copy\";\n    }, 2000);\n  };\n\n  render() {\n    return (\n      <div className=\"Joke\">\n        <div className=\"Joke-buttons\">\n          <FontAwesomeIcon\n            className=\"fa-arrow-up\"\n            icon={faArrowUp}\n            onClick={this.props.upvote}\n          />\n          <span className=\"Joke-votes\" style={{ borderColor: this.getColor() }}>\n            {this.props.votes}\n          </span>\n          <FontAwesomeIcon\n            className=\"fa-arrow-down\"\n            icon={faArrowDown}\n            onClick={this.props.downvote}\n          />\n        </div>\n        <div\n          className=\"Joke-text tooltip\"\n          ref={textdiv => (this.textDiv = textdiv)}\n          onClick={() => this.copyTextToClipboard()}\n        >\n          {this.props.text}\n          <span\n            className=\"tooltiptext\"\n            ref={message => (this.copyMessage = message)}\n          >\n            Click to Copy\n          </span>\n        </div>\n        <div className=\"Joke-smiley\">\n          <i\n            className={this.getEmoji()}\n            aria-label=\"ROLLING ON THE FLOOR LAUGHING\"\n          ></i>\n        </div>\n      </div>\n    );\n  }\n\n  componentDidMount() {\n    this.setState({\n      someKey: \"otherValue\"\n    });\n  }\n}\n\nexport default Joke;\n","import React from \"react\";\nimport axios from \"axios\";\nimport \"./JokeList.css\";\nimport Joke from \"./Joke\";\nimport uuid from \"uuid/v4\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faLaugh } from \"@fortawesome/free-solid-svg-icons\";\n\nclass JokeList extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      jokes: JSON.parse(window.localStorage.getItem(\"jokes\") || \"[]\"),\n      loading: false\n    };\n    this.seenJokes = new Set(this.state.jokes.map(joke => joke.text));\n    this.handleClick = this.handleClick.bind(this);\n  }\n  static defaultProps = {\n    numJokesToGet: 10\n  };\n\n  componentDidMount() {\n    if (this.state.jokes.length === 0) {\n      this.getJokes();\n    }\n    this.sortJokes();\n  }\n\n  async getJokes() {\n    try {\n      const url = \"https://icanhazdadjoke.com/\";\n      const headers = {\n        Accept: \"application/json\"\n      };\n      let jokes = [];\n      while (jokes.length < this.props.numJokesToGet) {\n        let res = await axios.get(url, { headers: headers });\n        let newJoke = res.data.joke;\n        if (!this.seenJokes.has(newJoke)) {\n          jokes.push({ id: uuid(), text: newJoke, votes: 0 });\n        }\n      }\n      this.setState(\n        st => ({\n          loading: false,\n          jokes: [...st.jokes, ...jokes]\n        }),\n        () =>\n          window.localStorage.setItem(\"jokes\", JSON.stringify(this.state.jokes))\n      );\n    } catch (e) {\n      console.log(e);\n      alert(\n        \"Oops! It looks like there is a problem in the network. We are working on fixing that!\"\n      );\n      this.setState({ loading: false });\n    }\n    this.sortJokes();\n  }\n\n  handleVote(id, delta) {\n    this.setState(\n      st => ({\n        jokes: st.jokes.map(joke =>\n          joke.id === id ? { ...joke, votes: joke.votes + delta } : joke\n        )\n      }),\n      () =>\n        window.localStorage.setItem(\"jokes\", JSON.stringify(this.state.jokes))\n    );\n  }\n\n  handleClick() {\n    this.setState({ loading: true }, this.getJokes);\n  }\n\n  sortJokes() {\n    let jokes = this.state.jokes.sort((a, b) => b.votes - a.votes);\n    this.setState({\n      jokes: jokes\n    });\n  }\n\n  render() {\n    if (this.state.loading) {\n      return (\n        <div className=\"JokeList-spinner\">\n          <FontAwesomeIcon icon={faLaugh} size=\"8x\" spin />\n          <h1 className=\"JokeList-title\">Loading...</h1>\n        </div>\n      );\n    }\n    // let jokes = this.state.jokes.sort((a, b) => b.votes - a.votes);\n    return (\n      <div className=\"JokeList\">\n        <div className=\"JokeList-sidebar\">\n          <h1 className=\"JokeList-title\">\n            <span>Dad</span> Jokes\n          </h1>\n          <img\n            src=\"https://assets.dryicons.com/uploads/icon/svg/8927/0eb14c71-38f2-433a-bfc8-23d9c99b3647.svg\"\n            alt=\"emoji-laugh\"\n          />\n          <button className=\"JokeList-getmore\" onClick={this.handleClick}>\n            Fetch Jokes\n          </button>\n        </div>\n        <div className=\"JokeList-jokes\">\n          {this.state.jokes.map(joke => (\n            <Joke\n              votes={joke.votes}\n              text={joke.text}\n              key={joke.id}\n              upvote={() => this.handleVote(joke.id, 1)}\n              downvote={() => this.handleVote(joke.id, -1)}\n            />\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default JokeList;\n","import React from \"react\";\nimport JokeList from \"./JokeList\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <JokeList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}